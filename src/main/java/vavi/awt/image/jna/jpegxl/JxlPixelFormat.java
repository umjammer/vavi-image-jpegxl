package vavi.awt.image.jna.jpegxl;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : jxl/types.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class JxlPixelFormat extends Structure {
	public int num_channels;
	/**
	 * @see Library.JxlDataType
	 * C type : JxlDataType
	 */
	public int data_type;
	/**
	 * @see Library.JxlEndianness
	 * C type : JxlEndianness
	 */
	public int endianness;
	public NativeLong align;
	public JxlPixelFormat() {
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("num_channels", "data_type", "endianness", "align");
	}
	/**
	 * @param data_type @see JxlDataType<br>
	 * C type : JxlDataType<br>
	 * @param endianness @see JxlEndianness<br>
	 * C type : JxlEndianness
	 */
	public JxlPixelFormat(int num_channels, int data_type, int endianness, NativeLong align) {
		this.num_channels = num_channels;
		this.data_type = data_type;
		this.endianness = endianness;
		this.align = align;
	}
	public JxlPixelFormat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends JxlPixelFormat implements Structure.ByReference {
	}
	public static class ByValue extends JxlPixelFormat implements Structure.ByValue {
	}
	public int necessaryBytes() {
		switch (data_type) {
		case Library.JxlDataType.JXL_TYPE_FLOAT:
			return Float.BYTES;
		case Library.JxlDataType.JXL_TYPE_UINT8:
			return Byte.BYTES;
		case Library.JxlDataType.JXL_TYPE_UINT16:
			return Short.BYTES;
		case Library.JxlDataType.JXL_TYPE_FLOAT16:
			return 2;
		default:
			throw new IllegalStateException(String.valueOf(data_type));
		}
	}
}
